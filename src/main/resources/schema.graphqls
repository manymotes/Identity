type Query {
    getUserById(id: ID!): UserResponse
}

type Mutation {
    createUser(user: UserInput!): UserResponse!
    updateUser(user: UserUpdateInput!): UserResponse!
    login(email: String!, password: String!): LoginResponse!
    logout: Result
}

type Result {
    success: Boolean!
}

type User {
    uuid: ID!
    password: String!
    email: String!
    firstName: String!
    lastName: String!
}

type UserResponse {
    uuid: ID!
    email: String!
    firstName: String!
    lastName: String!
}

type LoginResponse {
    authState: AuthState
    userUuid: ID
}

input UserInput {
    password: String!
    email: String!
    firstName: String!
    lastName: String!
    age: Int!
    gender: String!
}

input UserUpdateInput {
    uuid: ID!
    email: String!
    firstName: String!
    lastName: String!
}

enum AuthState {
    NOT_AUTHENTICATED,
    AUTHENTICATED
}



